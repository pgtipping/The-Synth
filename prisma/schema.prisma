generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Blog specific models
model Post {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     String     @db.Text
  published   Boolean    @default(false)
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  categories  Category[]
  tags        Tag[]
  citations   Citation[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("posts")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}

model Source {
  id              String     @id @default(cuid())
  url             String
  title           String
  author          String?
  publicationDate DateTime?
  contentExcerpt  String?    @db.Text
  metadata        Json?
  citations       Citation[]
  createdAt       DateTime   @default(now())
  lastVerifiedAt  DateTime?

  @@map("sources")
}

model Citation {
  id              String   @id @default(cuid())
  postId          String
  post            Post     @relation(fields: [postId], references: [id])
  sourceId        String
  source          Source   @relation(fields: [sourceId], references: [id])
  citationText    String   @db.Text
  citationType    String?
  pageNumber      String?
  inTextReference String?
  createdAt       DateTime @default(now())

  @@map("citations")
}

model VerificationLog {
  id              String   @id @default(cuid())
  postId          String
  verifiedBy      String
  verificationType String
  status          String
  notes           String?  @db.Text
  createdAt       DateTime @default(now())

  @@map("verification_logs")
}

enum UserRole {
  USER
  EDITOR
  ADMIN
} 